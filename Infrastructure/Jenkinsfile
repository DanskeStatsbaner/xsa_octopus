pipeline {

    agent {
        label "linux"
    }
    parameters {
        booleanParam(name: 'TagLatest', defaultValue: false, description: 'Tag this image as latest')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
        timestamps()
        disableConcurrentBuilds()
    }
    environment {
        projectName  = "xsa_octopus"
        deployTo = "sit"
        version = "1.0.0.${env.BUILD_NUMBER}"
        suffix = "${env.GIT_COMMIT}-${env.GIT_BRANCH.replace('/', '-')}"
        packageVersion = "${version}-${suffix}"
        jobName = "xsa_octopus"
        artifactoryServerId = "artifactory"   
    }

    stages {
        stage ("Stash files") {
            steps {
                unzip zipFile: "$WORKSPACE/SpaceCloner-master.zip", dir: "$WORKSPACE/"
                stash includes: "SpaceCloner-master/*.ps1", name: "RootScripts", useDefaultExcludes: false
                stash includes: "SpaceCloner-master/src/Cloners/*.ps1", name: "ClonerScripts", useDefaultExcludes: false
                stash includes: "SpaceCloner-master/src/Core/*.ps1", name: "CoreScripts", useDefaultExcludes: false
                stash includes: "SpaceCloner-master/src/DataAccess/*.ps1", name: "DataAccessScripts", useDefaultExcludes: false
            }
        }
        stage ("Publish Artifacts") {
            agent {
                docker {
                    image "octopusdeploy/octo"
                    args '--entrypoint=\'\''
                }
                                               }
                steps {
                unstash "RootScripts"
                unstash "ClonerScripts"
                unstash "CoreScripts"
                unstash "DataAccessScripts"
                
                sh "rm -rf dataART.${projectName}.${version}"
                fileOperations([ 
                        fileCopyOperation(
                                flattenFiles: true,
                                includes: "SpaceCloner-master/*.ps1",
                                targetLocation: "$WORKSPACE/dataART.${projectName}.${version}/SpaceCloner-master/"), 
                        fileCopyOperation(
                                flattenFiles: true,
                                includes: "SpaceCloner-master/src/Cloners/*.ps1",
                                targetLocation: "$WORKSPACE/dataART.${projectName}.${version}/SpaceCloner-master/src/Cloners/"), 
                        fileCopyOperation(
                                flattenFiles: true,
                                includes: "SpaceCloner-master/src/Core/*.ps1",
                                targetLocation: "$WORKSPACE/dataART.${projectName}.${version}/SpaceCloner-master/src/Core/"), 
                        fileCopyOperation(
                                flattenFiles: true,
                                includes: "SpaceCloner-master/src/DataAccess/*.ps1",
                                targetLocation: "$WORKSPACE/dataART.${projectName}.${version}/SpaceCloner-master/src/DataAccess/")])

                sh """ octo pack --id="dataART.${projectName}" --version="${packageVersion}" --basepath="$WORKSPACE/dataART.${projectName}.${version}" --outFolder=$WORKSPACE """
                
                rtUpload(
                    spec: '''{ "files": [
                        {
                            "pattern": "dataART.${projectName}.${packageVersion}.nupkg",
                            "target": "octopus-dataarten/"
                        }
                    ] }''',
                    buildNumber: "${packageVersion}", buildName: "dataART.${projectName}",
                    serverId: "${artifactoryServerId}"
                )
                rtPublishBuildInfo(buildNumber: "${packageVersion}", buildName: "dataART.${projectName}", serverId: "${artifactoryServerId}")
             }
        }  
        stage ("Octopus sit") {
            agent {
                docker {
                    image "octopusdeploy/octo"
                    args '--entrypoint=\'\''
                }
                                               }
            options { skipDefaultCheckout true }
            environment {
                deployTo = "sit"
                releaseversion = "${version}"
                apiKey = credentials("Octopus-Api")
                octopusURL = "https://octopus.azure.dsb.dk"
                hostargs = "--server ${octopusURL} --apiKey ${apiKey} --project ${jobName} --version=${releaseversion}"
            }
            steps {
                addBadge(text: "octopus", icon: "/userContent/octopus_16x16.png", id: "octopus", link: "${octopusURL}/app#/Spaces-3/projects/${jobName}/deployments/releases/${releaseversion}")
                sh """
                    octo create-release  $hostargs --defaultpackageversion=${packageVersion}
                    octo deploy-release $hostargs --deployto=${deployTo} --waitfordeployment --deploymentTimeout=00:20:00
                """
            }
        }        

    }
}
